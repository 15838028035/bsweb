1、数据库字段统一为大小，中间用_隔开，例如 create_date。
2、java类首字母大小，例如UPM_USER对应的类为UpmUser。
3、对于日期类型的字段，例如creatDate，对应查询条件有creatDateBegin、createDateEnd字段。
4、core工程中新增的类和方法，必须添加单元测试，测试覆盖率必须达到60%-80%。

开发规范： 1、在mapper.xml中namespace等于mapper接口地址
* 2、mapper.java接口中的方法名和mapper.xml中statement的id一致
*
* 3、mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致。
*
* 4、mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致。
* 5、jsp、java中数字统一保留两位小数

术语说明

    术语class可表示一个普通类，枚举类，接口或是annotation类型(@interface)
    术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。

源文件基础
文件名

源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为.java。
文件编码：UTF-8

源文件编码格式为UTF-8。
特殊字符

    空白字符
        除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：
            所有其它字符串中的空白字符都要进行转义。
            制表符不用于缩进。
    特殊转义序列 -对于具有特殊转义序列的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如\012)或Unicode(比如\u000a)转义。
    非ASCII字符
        对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。
        Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。
        Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)

源文件结构

一个源文件包含(按顺序地)：

        1.许可证或版权信息(如有需要)
        2.package语句
        3.import语句
        4.一个顶级类（只有一个）

    许可证或版权信息
        如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。
    package语句
        package语句不换行，列限制并不适用于package语句。(即package语句写在一行里)
    import语句
        import不要使用通配符。即，不要出现类似这样的import语句：import java.util.*;
    不要换行
        import语句不换行，列限制并不适用于import语句。(每个import语句独立成行)
    顺序和间距
        import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：
        1.所有的静态导入独立成组
        2.com.google imports(仅当这个源文件是在com.google包下)
        3.第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun
        4.java imports
        5.javax imports
        组内不空行，按字典序排列。

类声明

    只有一个顶级类声明
        每个顶级类都在一个与它同名的源文件中(当然，还包含.java后缀)。
        例外：package-info.java，该文件中可没有package-info类。
    类成员顺序
        类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。
    重载：永不分离
        当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。

格式

    自动换行的基本准则是：更倾向于在更高的语法级别处断开。
        如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)
        注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。
        这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&（)，catch块中的管道符号(catch (FooException | BarException e)
    如果在赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)
        这条规则也适用于foreach语句中的分号。
    方法名或构造函数名与左括号留在同一行。
    逗号(,)与其前面的内容留在同一行。
    自动换行时缩进至少+4个空格
        自动换行时，第一行后的每一行至少比第一行多缩进4个空格
        当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)
        一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。
    水平空白 除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：
        分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。
        分隔任何保留字与其前面的右大括号(})(如else, catch)。
    用小括号来限定组：推荐 除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。

具体结构

    枚举类
        枚举常量间用逗号隔开，换行可选。
        没有方法和文档的枚举类可写成数组初始化的格式：
        private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }
        由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。
    变量声明
        每次只声明一个变量,不要使用组合声明，比如int a, b;。
        需要时才声明，并尽快进行初始化
        不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。
        局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。

注释

    块注释风格
        块注释与其周围的代码在同一缩进级别。它们可以是/* ... /风格，也可以是// ...风格。对于多行的/ ... /注释，后续行必须从开始，
        注释不要封闭在由星号或其它字符绘制的框架里。
        Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用/* ... */。
    Modifiers
        类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。
        public protected private abstract static final transient volatile synchronized native strictfp

命名约定

    对所有标识符都通用的规则
        标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式\w+。 在Google其它编程语言风格中使用的特殊前缀或后缀，如name_, mName, s_name和kName，在Java编程风格中都不再使用。

    标识符类型的规则
        包名全部小写，连续的单词只是简单地连接起来，不使用下划线。
        类名都以UpperCamelCase风格编写。
        类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。
        测试类的命名以它要测试的类的名称开始，以Test结束。例如，HashTest或HashIntegrationTest。
    方法名
        方法名都以lowerCamelCase风格编写。
        方法名通常是动词或动词短语。
        下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test_，例如testPop_emptyStack。 并不存在唯一正确的方式来命名测试方法。
    常量名 常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？ 每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。
    非常量字段名
        非常量字段名以lowerCamelCase风格编写。
        这些名字通常是名词或名词短语。
    参数名
        参数名以lowerCamelCase风格编写。
        参数应该避免用单个字符命名。
    局部变量名 -局部变量名以lowerCamelCase风格编写，也可以有更为宽松的缩写。
        虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。
        即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。

